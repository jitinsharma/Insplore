apply plugin: 'com.android.application'

import groovy.json.JsonSlurper
import groovy.xml.MarkupBuilder

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "io.github.jitinsharma.insplore"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.google.android.gms:play-services:9.0.2'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:palette-v7:23.4.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.sackcentury:shinebutton:0.1.2'
}

task getCitiesAsString {
    doLast {
        String path = "app/src/main/assets/yapq_cities.json"
        def inputFile = new File(path)
        def json = new JsonSlurper().parseText(inputFile.text)
        def cities = json
        def sw = new StringWriter()
        def xml = new MarkupBuilder(sw)
        xml.resources {
            'string-array'(name: "yapq_cities") {
                for (int i = 0; i < cities.size; i++) {
                    def value = cities.get(i).city.toString()
                    println value
                    item(value)
                }
            }
        }
        def stringsFile = new File("app/src/main/res/values/cities.xml")
        stringsFile.write(sw.toString())
    }
}
